#!/usr/bin/env python3

import sys
import subprocess
import json
import re
import pprint
import hashlib



def git_log_json(argv: list):
    RC_SPLITER = "|^=<<=^|"
    ATTR_SPLITER = "|^=@@=^|"
    format_map = {
        "hash" : "%h",
        "subject" : "%s",
        "ref" : "%d",
        "body" : "%b",
        "author_email" : "%ae",
        "author_time" : "%at",
    }

    format_str = ATTR_SPLITER.join( v for _,v in format_map.items() )
    cmd = [ 'git', 'log' , f'--format={RC_SPLITER}{format_str}' ] + argv

    try:
        info = subprocess.run(cmd, check=True, capture_output=True)
    except subprocess.CalledProcessError as e:
        err_msg = {
            'returncode': e.returncode,
            'cmd': e.cmd,
        }
        return { 
            "type": "error",
            "content": err_msg
        }


    # 1. Raw stdout
    decoded = info.stdout.decode('utf-8')
    # ignore first empty record [ '' , record1 , record2 ... ]

    # 2. Split stdout to records
    records = [ s.strip() for s in decoded.split(RC_SPLITER)[1:] ]

    # 3. Split record to attribute
    for i,rc in enumerate(records):
        records[i] = rc.split(ATTR_SPLITER)

    # 4. turn record from list into dict
    for i,rc in enumerate(records):
        result  = {}
        for j,k in enumerate(format_map.keys()):
            result[k] = rc[j]
        records[i] = result

    # 5. Try to find a changeid or calc one
    for rc in records:
        matched = re.search(r'Change-Id: (\w+)', rc["body"])

        if matched:
            rc["changeid"] = matched.group(1)
        else:
            hash_content = "||".join( [ rc["subject"], rc["body"], rc["author_time"] ])
            rc["changeid"] = hashlib.sha1(hash_content.encode(encoding='utf-8')).hexdigest() \
                + "||subject||body||author_time"

    return { 
        "type": "success",
        "content": records
    }

    
if __name__ == "__main__":
    print(
        json.dumps(
            git_log_json(sys.argv[1:]),
            indent=4
        )
    )





