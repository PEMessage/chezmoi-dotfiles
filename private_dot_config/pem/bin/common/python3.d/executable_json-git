#!/usr/bin/env python3

import subprocess
import json
import re
import itertools
import hashlib
import argparse


def git_log_json(argv: list):
    RC_SPLITER = "|^=<<=^|"
    ATTR_SPLITER = "|^=@@=^|"
    format_map = {
        "hash": "%H",
        "parent": "%P",
        "subject": "%s",
        "ref": "%d",
        "body": "%b",
        "author_email": "%ae",
        "author_time": "%at",
    }

    format_str = ATTR_SPLITER.join(v for _, v in format_map.items())
    cmd = ['git', 'log', f'--format={RC_SPLITER}{format_str}'] + argv

    try:
        info = subprocess.run(cmd, check=True, capture_output=True)
    except subprocess.CalledProcessError as e:
        err_msg = {
            'returncode': e.returncode,
            'cmd': e.cmd,
            'stderr': e.stderr.decode('utf-8')
        }
        return {
            "type": "error",
            "content": err_msg
        }

    # 1. Raw stdout
    decoded = info.stdout.decode('utf-8')
    # ignore first empty record [ '' , record1 , record2 ... ]

    # 2. Split stdout to records
    records = [s.strip() for s in decoded.split(RC_SPLITER)[1:]]

    # 3. Split record to attribute
    for i, rc in enumerate(records):
        records[i] = rc.split(ATTR_SPLITER)

    # 4. turn record from list into dict
    for i, rc in enumerate(records):
        result = {}
        for j, k in enumerate(format_map.keys()):
            result[k] = rc[j]
        records[i] = result

    # 5. Try to find a changeid or calc one
    for rc in records:
        matched = re.search(r'Change-Id: (\w+)', rc["body"])

        if matched:
            rc["changeid"] = matched.group(1)
        else:
            hash_content = "||".join(
                [rc["subject"], rc["body"], rc["author_time"]])
            rc["changeid"] = hashlib.sha1(hash_content.encode(encoding='utf-8')).hexdigest() \
                + "||subject||body||author_time"

    return {
        "type": "log",
        "content": records
    }


def get_difference(list1, list2):
    key = "changeid"

    if list1 is None:
        list1 = []
    if list2 is None:
        list2 = []

    ids1 = set(item[key] for item in list1)

    ids2 = set(item[key] for item in list2)
    only_in_list1 = list(
        itertools.filterfalse(lambda item: item[key] in ids2, list1)
    )
    only_in_list2 = list(
        itertools.filterfalse(lambda item: item[key] in ids1, list2)
    )
    return only_in_list1, only_in_list2


if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog='json-git')
    subparsers = parser.add_subparsers(
        help='support subcommand', dest='subcmd')

    parser_log = subparsers.add_parser('log', help='git log')

    parser_difflog = subparsers.add_parser(
        'difflog', help='git diff FROMID TOID')
    parser_difflog.add_argument("refA")
    parser_difflog.add_argument("refB")

    opt, argv = parser.parse_known_args()

    if opt.subcmd == 'log':
        print(
            json.dumps(
                git_log_json(argv),
                indent=4
            )
        )
    elif opt.subcmd == 'difflog':
        atob = git_log_json([opt.refA + '..' + opt.refB])
        btoa = git_log_json([opt.refB + '..' + opt.refA])

        only_in_b, only_in_a = get_difference(atob["content"], btoa["content"])
        result = {
            "type": "difflog",
            "content": {
                "onlyB": only_in_b,
                "onlyA": only_in_a
            }
        }
        print(
            json.dumps(
                result,
                indent=4
            )
        )
