let g:startify_custom_header = [
\
\ '   ██████╗ ███████╗███╗   ███╗███████╗███████╗███████╗ █████╗  ██████╗ ███████╗ ',
\ '   ██╔══██╗██╔════╝████╗ ████║██╔════╝██╔════╝██╔════╝██╔══██╗██╔════╝ ██╔════╝ ',
\ '   ██████╔╝█████╗  ██╔████╔██║█████╗  ███████╗███████╗███████║██║  ███╗█████╗   ',
\ '   ██╔═══╝ ██╔══╝  ██║╚██╔╝██║██╔══╝  ╚════██║╚════██║██╔══██║██║   ██║██╔══╝   ',
\ '   ██║     ███████╗██║ ╚═╝ ██║███████╗███████║███████║██║  ██║╚██████╔╝███████╗ ',
\ '   ╚═╝     ╚══════╝╚═╝     ╚═╝╚══════╝╚══════╝╚══════╝╚═╝  ╚═╝ ╚═════╝ ╚══════╝ ',
\ ]
" +++++++++++++++++++++++++++++++++++++++++++
" File: .vimrc
" Author: PEMessage
" Description: This is my VIM8+/NeoVIM configuration
" Last Modified:  2023-05-29 Mon 03:01 PM
" +++++++++++++++++++++++++++++++++++++++++++



" 1. Configure List
" ===========================================
    
    " Plug-Mirror
    let s:PE_VimPlugURL = 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    " let s:PE_VimPlugURL = 'https://gitee.com/yaozhijin/vim-plug/raw/master/plug.vim'
     
    " let g:plug_url_format='https://git::@hub.fastgit.xyz/%s.git'
    " let g:plug_url_format='https://ghproxy.com/https://github.com/%s.git'

    " TrueColor
    set termguicolors
    set nocompatible

    " Comment Color
    let s:PECommentColor = {"gui": "#00af87", "cterm": "246", "cterm16": "7"}
    " let s:PECompleteSys  = "asyncomplete"
    " let s:PECompleteSys  = "apt"
    let g:lightline = {
                \ 'colorscheme': 'selenized_black',
                \ }
    nnoremap <leader>tt :call lightline#toggle()<CR>
    


" 2. Auto Install ViM-Plug
" ===========================================
"   
    if has('nvim')
        let g:pe_runtimepath = stdpath('data') . '/site'
    else
        exe 'set rtp+=' . expand('~/.config/vim')
        let g:pe_runtimepath = expand('~/.config/vim') 
    endif
    if empty(glob(pe_runtimepath . '/autoload/plug.vim'))
      silent execute '!curl -fLo '.pe_runtimepath.'/autoload/plug.vim --create-dirs '.s:PE_VimPlugURL
      source $MYVIMRC
    endif


" 3. Some General Setting
" ===========================================

" -------------------------------------------
" 3.1 Basic Setting Zone
" -------------------------------------------
    set nocompatible     " 禁用 vi 兼容模式
    set helplang=cn      " 设置中文帮助手册
    set nowrap           " 关闭自动换行
    set ruler            " 显示光标位置
    set ffs=unix,dos,mac " 文件换行符，默认使用 unix 换行符
    set clipboard=       " 关闭系统剪贴板共享
    set clipboard=       " 关闭系统剪贴板共享

" -------------------------------------------
" 3.2 Coding Zone
" -------------------------------------------
    if has('multi_byte')
        " 内部工作编码
        set encoding=utf-8

        " 文件默认编码
        set fileencoding=utf-8

        " 打开文件时自动尝试下面顺序的编码
        set fileencodings=ucs-bom,utf-8,gbk,gb18030,big5,euc-jp,latin1
    endif

    if has('folding')
        " 允许代码折叠
        set foldenable

        " 代码折叠默认使用缩进
        set fdm=indent

        " 默认打开所有缩进
        set foldlevel=99
    endif

    if has('syntax')  
        syntax enable 
        syntax on 
    endif

    if has('mouse')
        set mouse+=a
    endif


" -------------------------------------------
" 3.3 Search Zone
" -------------------------------------------
    set smartcase   " 智能搜索大小写判断，默认忽略大小写，除非搜索内容包含大写字母
    set incsearch   " 查找输入时动态增量显示查找结果
    set hlsearch    " 高亮搜索内容
 


" -------------------------------------------
" 3.4 Tab and Indent Setting
" -------------------------------------------
    set tabstop=4                  " Tab 长度，默认为8
    set smarttab                   " 根据文件中其他地方的缩进空格个数来确定一个tab是多少个空格
    set expandtab                  " 展开Tab

    set shiftwidth=4               " 缩进长度，设置为4
    set autoindent                 " 自动缩进
    set cindent                    " C语言更好的缩进

    set backspace=eol,start,indent " 类似所有编辑器的删除键

    if has('autocmd')
        filetype plugin indent on  " 允许 Vim 自带脚本根据文件类型自动设置缩进等
    endif

    " Tab Line Setting Zone
    set hidden

" -------------------------------------------
" 3.5 Window Setting
" -------------------------------------------
    autocmd FileType help wincmd L
    autocmd FileType man wincmd L
	runtime ftplugin/man.vim
    set linebreak

" -------------------------------------------
" 3.6 Meta Setting
" -------------------------------------------
    if $TMUX != ''
        set ttimeoutlen=30
    elseif &ttimeoutlen > 80 || &ttimeoutlen <= 0
        set ttimeoutlen=80
    endif
    " 终端下允许 ALT，详见：http://www.skywind.me/blog/archives/2021
    " 记得设置 ttimeout （见 init-basic.vim） 和 ttimeoutlen （上面）
    " Plug ‘vim-fixkey’ 更好的解决了这个问题
    "----------------------------------------------------------------------
    if has('nvim') == 0 && has('gui_running') == 0
        function! s:metacode(key)
            exec "set <M-".a:key.">=\e".a:key
        endfunc
        function! s:set_key(key, keyCode)
            if get(g:, 'altmeta_skip_meta', 0) == 0
                execute "set " . a:key . "=" . a:keyCode
            endif
        endfunc

        for i in range(10)
            call s:metacode(nr2char(char2nr('0') + i))
        endfor
        for i in range(26)
            call s:metacode(nr2char(char2nr('a') + i))
            call s:metacode(nr2char(char2nr('A') + i))
        endfor
        for c in [',', '.', '/', ';', '{', '}']
            call s:metacode(c)
        endfor
        for c in ['?', ':', '-', '_', '+', '=', "'"]
            call s:metacode(c)
        endfor
        for c in ['`']
            call s:metacode(c)
        endfor
    endif

"  Mark A
" Difference Map | Norm | Ins | Cmd | Vis | Sel | Opr | Term | Lang | 
"                +------+-----+-----+-----+-----+-----+------+------+ 
" [nore]map      | yes  |  -  |  -  | yes | yes | yes |  -   |  -   |
" n[nore]map     | yes  |  -  |  -  |  -  |  -  |  -  |  -   |  -   |
" [nore]map!     |  -   | yes | yes |  -  |  -  |  -  |  -   |  -   |
" i[nore]map     |  -   | yes |  -  |  -  |  -  |  -  |  -   |  -   |
" c[nore]map     |  -   |  -  | yes |  -  |  -  |  -  |  -   |  -   |
" v[nore]map     |  -   |  -  |  -  | yes | yes |  -  |  -   |  -   |
" x[nore]map     |  -   |  -  |  -  | yes |  -  |  -  |  -   |  -   |
" s[nore]map     |  -   |  -  |  -  |  -  | yes |  -  |  -   |  -   |
" o[nore]map     |  -   |  -  |  -  |  -  |  -  | yes |  -   |  -   |
" t[nore]map     |  -   |  -  |  -  |  -  |  -  |  -  | yes  |  -   |
" l[nore]map     |  -   | yes | yes |  -  |  -  |  -  |  -   | yes  |

" 4. Keybending list
" ===========================================
" KeyBinding Setting Zone ( Input Mode  )
    inoremap jj <ESC>
    "Emacs Like ShortCut
    noremap! <C-A> <home> 
    noremap! <C-E> <end>
    noremap! <C-_> <C-K> " 插入 digraph（见 :h digraph），快速输入日文或符号等
    noremap! <C-Y> <C-R>
    

    
    

" KeyBinding Setting Zone ( Normal Mode  )
    nnoremap <silent><M-S-N> :bnext<CR>
    nnoremap <silent><M-S-P> :bprev<CR>

    "    CTRL-H 同 `<BS>` 一样功能，我们都是直接用 `<BS>` 没人CTRL-H的，直接覆盖掉
    "    CTRL-J 同回车（有两个码 0x0d 或 0x0a），C-J是0x0d，硬回车是0x0a，没人按这个，覆盖。
    "    CTRL-K 输入 digraph，比如可以用来输入欧洲文字，不需要，实在需要可以把这个功能挪给 INSERT模式下的 CTRL-B （空闲），或者 <c-x><c-k> ，完全可以覆盖。
    "    CTRL-L 重绘，很少用，自己可以把他挪到 <leader>r 之类的键去多干净，覆盖。
    nnoremap <silent><M-S-H> :wincmd h<CR>
    nnoremap <silent><M-S-L> :wincmd l<CR>
    nnoremap <silent><M-S-J> :wincmd j<CR>
    nnoremap <silent><M-S-K> :wincmd k<CR>

    tnoremap <silent><M-S-H> <C-W>:wincmd h<CR>
    tnoremap <silent><M-S-L> <C-W>:wincmd l<CR>
    tnoremap <silent><M-S-J> <C-W>:wincmd j<CR>
    tnoremap <silent><M-S-K> <C-W>:wincmd k<CR>

    nnoremap <silent> j gj
    nnoremap <silent> k gk

" KeyBinding Setting Zone ( Better Mouse )
    nnoremap <silent><C-S-TAB> :tabp<CR>
    inoremap <silent><C-S-TAB> <C-o>:tabp<CR>
    nnoremap <silent><C-TAB>   :tabn<CR>
    inoremap <silent><C-TAB>   <C-o>:tabn<CR>
    " nnoremap <MiddleMouse>     :tabclose<CR>
    vnoremap <RightMouse>            "+y
    inoremap <RightMouse>       <C-o>"+p

" KeyBinding Setting Zone ( Better Mouse )
    nnoremap <leader>rcc  :w<CR> :source %<CR> " Re:Configuration
    nnoremap <leader>rce  :w<CR> :tabe ~/.vimrc <CR> 

    nnoremap <leader>``   :nohlsearch<CR>
    nnoremap <leader>wp  :set nowrap!<CR>
    nnoremap <leader>cl  :set cursorline!<CR>
    
    nnoremap <leader>nu  :set number!<CR>
                        set number
    nnoremap <leader>nr :set relativenumber!<CR>
    nnoremap <leader>tb  :tab ball<CR>
    nnoremap gp  `[v`]

    let g:netrw_banner = 0                      " 设置是否显示横幅
    if argv(0) ==# '.'
        let g:netrw_browse_split = 0
    else
        let g:netrw_browse_split = 4
    endif

    let g:netrw_preview = 1                     " 指针保留于Netrw
    let g:netrw_winsize = 25                    " %25的窗口大小
    let g:netrw_liststyle = 2                   " 设置目录列表的样式：树形
    let g:netrw_sort_sequence = '[\/]$,*'
    let g:netrw_hide = 1

    autocmd FileType netrw call s:RemoveNetrwMap()
    function s:RemoveNetrwMap()
        if hasmapto('<Plug>NetrwRefresh')
            " Unmap Netrw Keybind
            unmap <buffer> <C-I>
            unmap <buffer> <C-O>

            " map Netrw Keybind
                " Forward dir
                nmap <buffer> <C-I> U
                " Backword dir
                nmap <buffer> <C-O> u
                " ctrl-l for left pannel

            " New Map 
                " Back to parent dir
                nmap <buffer> H -           
                nmap <buffer> <C-0> echo b
                " Enter next dir
                nmap <buffer> L <C-M>
        endif
    endfunction

    nnoremap <silent><leader>b  :Lexplore<CR>


    nnoremap + 4kzz
    nnoremap _ 5jzz
" Command Zone
    command! PEWrite w! sudo tee % 

" VIM Style Setting
    set laststatus=2            " 总是显示状态栏
    set showtabline=2           " 总是显示标签栏
    set splitright              " 水平切割窗口时，默认在右边显示新窗口
    
    set statusline=                                 " 清空状态了
    set statusline+=\ %F                            " 文件名
    set statusline+=\ [%1*%M%*%n%R%H]               " buffer 编号和状态
    set statusline+=%=                              " 向右对齐
    set statusline+=%{!getcwd()}
    set statusline+=\ %y                            " 文件类型
    nnoremap <silent> <leader>wd :echo getcwd()<CR>

    " 最右边显示文件编码和行号等信息，并且固定在一个 group 中，优先占位
    set statusline+=\ %0(%{&fileformat}\ [%{(&fenc==\"\"?&enc:&fenc).(&bomb?\",BOM\":\"\")}]\ %v:%l/%L%)


" 5. VIM Plug-in Zone
" ===========================================
call plug#begin(pe_runtimepath . '/plugged')

" Basic Funtion
    " Plug 'skywind3000/vim-quickui'
    
    " Some little tweak
    " Plug 'drmikehenry/vim-fixkey'
    Plug 'PEMessage/vim-fixkey'
    Plug 'junegunn/fzf'
    Plug 'junegunn/fzf.vim'
    noremap <silent> <C-r> :History<CR>
    " if has('autocmd')
    "     autocmd filetype fzf
    " else
    " augroup PE_FZF_GROUP
    "     autocmd!
    "     autocmd filetype fzf tnoremap  <buffer> <C-o> <enter>
    " augroup END 
    " JUST USE <C-M> AS ENTER

" Style PlugIn
    Plug 'itchyny/lightline.vim'
    Plug 'edkolev/tmuxline.vim'

    Plug 'romgrk/github-light.vim'
    Plug 'joshdick/onedark.vim'

    Plug 'Yggdroot/indentLine'
    Plug 'mhinz/vim-startify'
    nnoremap <leader>st :tab new<CR>:Startify<CR> " Most Recent File MRF
    nnoremap <leader>sb :Startify<CR> " Most Recent File MRF
    " Plug 'ap/vim-buftabline'
   
    Plug 'liuchengxu/vim-which-key', { 'on': ['WhichKey', 'WhichKey!'] }
    Plug 'skywind3000/vim-terminal-help'
        let g:terminal_key = '<M-`>'
    " Plug 'kvngvikram/rightclick-macros'
    Plug 'skywind3000/vim-quickui'
   
  


" Locale
    Plug 'yianwillis/vimcdoc'
    " Plug 'brglng/vim-im-select'
    if has('win32')
        let g:im_select_default = '1033'
    endif
   
" Edit Experinece
    Plug 'junegunn/vim-easy-align'
    nmap ga <Plug>(EasyAlign)
    xmap ga <Plug>(EasyAlign)
    Plug 'tpope/vim-surround'
    Plug 'tpope/vim-commentary'
    Plug 'tpope/vim-repeat'

    Plug 'easymotion/vim-easymotion'
        let g:EasyMotion_smartcase = 1
        let g:EasyMotion_enter_jump_first= 1
        let g:EasyMotion_space_jump_first = 1
        let g:EasyMotion_use_upper = 1
        
        nmap /              <Plug>(easymotion-sn)
        map     <space><space> <Plug>(easymotion-s)
        " nunmap ds
    Plug 'vim-scripts/YankRing.vim'
    nnoremap <silent> <leader>yr :YRShow<CR>
    inoremap <silent> <leader>yr :YRShow<CR>
    nnoremap <silent> <F11> :YRShow<CR>


    Plug 'mg979/vim-visual-multi', {'branch': 'master'}
    let g:VM_maps = {}
    let g:VM_maps['Find Under']         = '<C-d>'
    let g:VM_maps['Find Subword Under'] = '<C-d>'

    Plug 'NickLaMuro/vimux'
    nmap <Leader>vl :VimuxRunLastCommand<CR>
    nmap <Leader>vp :VimuxPromptCommand<CR>


    filetype plugin on
    if has("autocmd") && exists("+omnifunc")
	autocmd Filetype *
		    \	if &omnifunc == "" |
		    \		setlocal omnifunc=syntaxcomplete#Complete |
		    \	endif
    endif


    Plug 'skywind3000/vim-auto-popmenu'
    Plug 'skywind3000/vim-dict'
    Plug 'ludovicchabant/vim-gutentags'
        let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']
        " 所生成的数据文件的名称
        let g:gutentags_ctags_tagfile = '.tags'
        " 同时开启 ctags 和 gtags 支持：
        let g:gutentags_modules = []
        if executable('ctags')
            let g:gutentags_modules += ['ctags']
        endif
        if executable('gtags-cscope') && executable('gtags')
            let g:gutentags_modules += ['gtags_cscope']
        endif
        " 将自动生成的 ctags/gtags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
        let s:vim_tags = expand('~/.cache/tags')
        let g:gutentags_cache_dir = s:vim_tags
        if !isdirectory(s:vim_tags)
            silent! call mkdir(s:vim_tags, 'p')
        endif

        " 配置 ctags 的参数，老的 Exuberant-ctags 不能有 --extra=+q，注意
        let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
        let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
        let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
        " 如果使用 universal ctags 需要增加下面一行，老的 Exuberant-ctags 不能加下一行
        let g:gutentags_ctags_extra_args += ['--output-format=e-ctags']
        " 禁用 gutentags 自动加载 gtags 数据库的行为
        let g:gutentags_auto_add_gtags_cscope = 0
        let g:gutentags_define_advanced_commands = 1

    Plug 'skywind3000/gutentags_plus'
        let g:gutentags_plus_nomap = 1
        " Symbol
        noremap <silent> gs :GscopeFind s <C-R><C-W><cr> 
        " Defintion
        noremap <silent> gd :GscopeFind g <C-R><C-W><cr> 
        " Reference
        noremap <silent> gr :GscopeFind c <C-R><C-W><cr> 
        " File
        noremap <silent> gi :GscopeFind f <C-R>=expand("<cfile>")<cr><cr>
        " noremap <silent> <leader>gi :GscopeFind i <C-R>=expand("<cfile>")<cr><cr>
    Plug 'skywind3000/vim-preview'
        autocmd FileType qf nnoremap <silent><buffer> p :PreviewQuickfix<cr>
        autocmd FileType qf nnoremap <silent><buffer> P :PreviewClose<cr>
        autocmd FileType qf nnoremap <silent><buffer> <MiddleMouse> :PreviewQuickfix<cr>





    " enable this plugin for filetypes, '*' for all files.
    let g:apc_enable_ft = {'*':1}
    let g:apc_trigger = "\<c-x>\<c-n>"
    let g:apc_cr_confirm = 1
    set cpt=.,k,w,b

    " source for dictionary, current or other loaded buffers, see ':help cpt'

    " don't select the first item.
    set completeopt=menu,menuone,noselect

    " suppress annoy messages.
    set shortmess+=c





call plug#end()

    colorscheme onedark

  " Quick UI Register
   let g:quickui_color_scheme = 'system'
  "  " 安装一个 File 目录，使用 [名称，命令] 的格式表示各个选项。
  "  call quickui#menu#install('&File', [
  "              \ [ "&New File\tCtrl+n", 'echo 0' ],
  "              \ [ "&Open File\t(F3)", 'echo 1' ],
  "              \ [ "&Close", 'echo 2' ],
  "              \ [ "--", '' ],
  "              \ [ "&Save\tCtrl+s", 'echo 3'],
  "              \ [ "Save &As", 'echo 4' ],
  "              \ [ "Save All", 'echo 5' ],
  "              \ [ "--", '' ],
  "              \ [ "E&xit\tAlt+x", 'echo 6' ],
  "              \ ])

  "  " 每个项目还可以多包含一个字段，表示它的帮助文档，光标过去时会被显示到最下方的命令行
  "  call quickui#menu#install('&Edit', [
  "              \ [ '&Copy', 'echo 1', 'help 1' ],
  "              \ [ '&Paste', 'echo 2', 'help 2' ],
  "              \ [ '&Find', 'echo 3', 'help 3' ],
  "              \ ])

  "  " 在 %{...} 内的脚本会被求值并展开成字符串
  "  call quickui#menu#install("&Option", [
  "              \ ['Set &Spell %{&spell? "Off":"On"}', 'set spell!'],
  "              \ ['Set &Cursor Line %{&cursorline? "Off":"On"}', 'set cursorline!'],
  "              \ ['Set &Paste %{&paste? "Off":"On"}', 'set paste!'],
  "              \ ])


  "  function! PECheetMessage()
  "      let content =[  "=======================" 
  "                  \ , " Basic Usage" 
  "                  \ , "   Normal: <C-R> <-> u " 
  "                  \ , "   Normal: y\"[reg] copy to reg " 
  "                  \ , "   Visual: vi<range> r <space>" 
  "                  \ , "   Terminal: <C-\\><C-N> back to Terminal-Normal" 
  "                  \ , "=======================" 
  "                  \ , " EasyAlign" 
  "                  \ , "   <C-X> Interactive Mode " 
  "                  \ , "   :LiveEasyAlign live Mode" 
  "                  \ , "   `2=` Around the 2nd Occurrences " 
  "                  \ , "   `*=` Around all Occurrences" 
  "                  \ , "======================="  ]
  "      let opts = {"close":"button", "title":"My CheetSheet"}
  "      call quickui#textbox#open(content, opts)
  "  endfunc

  "  " install 命令最后可以加一个 “权重”系数，用于决定目录位置，权重越大越靠右，越小越靠左
  "  call quickui#menu#install('H&elp', [
  "              \ ["&PE_CheetThing", ':call PECheetMessage()', 'Leader+U' ],
  "              \ ["&Cheatsheet", 'help index', ''],
  "              \ ['T&ips', 'help tips', ''],
  "              \ ['--',''],
  "              \ ["&Tutorial", 'help tutor', ''],
  "              \ ['&Quick Reference', 'help quickref', ''],
  "              \ ['&Summary', 'help summary', ''],
  "              \ ], 10000)
  "  nnoremap leaderh :call PECheetMessage()<CR>

  "  " 打开下面选项，允许在 vim 的下面命令行部分显示帮助信息
  "  let g:quickui_show_tip = 1

  "  " 定义按两次空格就打开上面的目录
  "  noremap <space>m :call quickui#menu#open()<cr>
  "  noremap <space>a :call quickui#tools#list_buffer('e')<cr>
  "  

   let n_rightmouse_content = [
               \ ["Paste", "exec 'normal" . '"' . "+p'" ],
               \ ['-'],
               \ ["Find File(Tags)", 'exec "normal gi"' ],
               \ ]
  
   " set cursor to the last position
   let n_rightmouse_opts = {'index':g:quickui#context#cursor}
   nnoremap <RightMouse> :call quickui#context#open(n_rightmouse_content, n_rightmouse_opts)<CR>

  

" NeoVide Zone
" ===========================================
    " if exists('g:neovide')
    "     " do neovide specific config
    "     let g:neovide_cursor_vfx_mode = "railgun"
    "     let g:im_select_enable_focus_events = 0
    " endif

" Self Funtion Zone
" ===========================================
    let s:exitKeyList = [ 'q', "\<ESC>" ]
    let s:delKeyList  = [ 'x', 'd' ]
    let s:pairKeyList = [ 
    \ '(', ')' , 
    \ '<', '>' , 
    \ '{', '}' , 
    \ '`', '`' , 
    \ '[', ']'   
    \ ]
    " Stay in c-w prefix
    function PEWinMode()
        echo "VIM Windows Mode"
        while(1)
            let follow = nr2char(getchar())
            if index( s:exitKeyList , follow ) >= 0
                echo "Mode End"
                return
            endif
            exec "normal \<c-w>" . follow 
            redraw
        endwhile
    endfunction
    command! PEWinMode :call PEWinMode()
    nnoremap <silent><leader>wm :PEWinMode<CR>

    " TimeStamp in english or locale language 
    function PEDate(lang)
        if a:lang == "en"
            let l:temp_lc_time = v:lc_time
            exec "normal :language time en_US.UTF-8\<CR>"
            exec "normal a \<C-R>=" . 'strftime("%Y-%m-%d %a %I:%M %p")' . "\<CR>\<Esc>"
        endif

        if a:lang == "zh"
            exec "normal a \<C-R>=" . 'strftime("%Y-%m-%d %a %I:%M %p")' . "\<CR>\<Esc>"
        endif
    endfunction
    

    command! PEDate :call PEDate("en")
    " Surround Viusal Zone
    function PESurroundViusalZone()
        echo "VIM Surround"
        let follow = nr2char(getchar())
        if index( s:exitKeyList , follow ) >= 0
            echo "End Mode"
            return
        endif
        if index( s:delKeyList , follow ) >= 0
            exec "normal `<hx"
            exec "normal `>x"
            return
        endif

        let pairIndex = index( s:pairKeyList , follow ) 
        if pairIndex >= 0
            if ( pairIndex % 2 ) == 0
                let leftpair = s:pairKeyList[ pairIndex ] 
                let rightpair  = s:pairKeyList[ pairIndex+1 ]
            else
                let rightpair  = s:pairKeyList[ pairIndex ]
                let leftpair = s:pairKeyList[ pairIndex-1 ]
            endif
            exec "normal `<i" .leftpair ."\<esc>"
            exec "normal `>la".rightpair."\<esc>"
            return
        endif

        exec "normal `<i" .follow . "\<esc>"
        exec "normal `>la".follow . "\<esc>"
    endfunction
    noremap <silent><leader>sr :call PESurroundViusalZone()<CR>



    

